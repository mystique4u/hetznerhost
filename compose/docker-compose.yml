version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/acme.json:/etc/traefik/acme.json
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "443:443"
      - "25:25"
      - "465:465"
      - "993:993"
      - "995:995"
      - "4190:4190"
    environment:
      - TZ=UTC
    labels:
      - "traefik.enable=true"
      # Traefik dashboard
      - "traefik.http.routers.traefik.rule=Host(`traefik.itin.dev`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
      - "traefik.http.routers.traefik.middlewares=auth"
   
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

    networks:
      - main-net

  postgres_odoo:
    image: postgres:latest
    container_name: postgres_odoo
    environment:
      POSTGRES_USER: ${ODOO_DB_USER}
      POSTGRES_PASSWORD: ${ODOO_DB_PASSWORD}
      POSTGRES_DB: ${ODOO_DB_NAME}
      PGDATA: ${ODOO_DB_PGDATA}
    volumes:
      - ./db/postgres_data:/var/lib/postgresql/data
      - ./db/postgresql.conf:/etc/postgresql.conf
      - ./db/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: postgres -c config_file=/etc/postgresql.conf
    restart: always
    ports:
      - "5433:5432"
    networks:
      - main-net

  odoo:
    image: odoo:latest
    container_name: odoo
    depends_on:
      - postgres_odoo
    environment:
      HOST: postgres_odoo
      USER: ${ODOO_DB_USER}
      PASSWORD: ${ODOO_DB_PASSWORD}
      POSTGRES_DB: ${ODOO_DB_NAME}
    restart: always
    tty: true
    command: --
    volumes:
      - ./odoo/odoo_data:/var/lib/odoo
      - ./odoo/config:/etc/odoo
      - ./odoo/addons:/mnt/extra-addons
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.odoo.rule=Host(`crm.itin.dev`)"
      - "traefik.http.routers.odoo.entrypoints=websecure"
      - "traefik.http.routers.odoo.tls.certresolver=letsencrypt"
      - "traefik.http.services.odoo.loadbalancer.server.port=8069"
    networks:
      - main-net

  # Mailu Services
  redis:
    container_name: mailu-redis
    image: redis:alpine
    restart: always
    volumes:
      - "./mailu/redis:/data"
    depends_on:
      - resolver
    dns:
      - 192.168.20.254
    networks:
      - main-net

  front:
    container_name: mailu-front
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}nginx:${MAILU_VERSION:-2024.06}
    restart: always
    env_file: ".env"
    logging:
      driver: journald
      options:
        tag: mailu-front
    # Internal ports only, exposed via Traefik
    networks:
      - main-net
    volumes:
      - "./mailu/certs:/certs"
      - "./mailu/overrides/nginx:/overrides:ro"
    depends_on:
      - resolver
    dns:
      - 192.168.20.254
    labels:
      - "traefik.enable=true"

      # the second part is important to ensure Mailu can get certificates from letsencrypt for all hostnames
      - "traefik.http.routers.web.rule=Host(`mail.itin.dev`) || PathPrefix(`/.well-known/acme-challenge/`)"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.services.web.loadbalancer.server.port=80"

      # other FQDNS can be added here:
      - "traefik.tcp.routers.websecure.rule=HostSNI(`mail.itin.dev`) || HostSNI(`autoconfig.itin.dev`)"
      - "traefik.tcp.routers.websecure.entrypoints=websecure"
      - "traefik.tcp.routers.websecure.tls.passthrough=true"
      - "traefik.tcp.routers.websecure.service=websecure"
      - "traefik.tcp.services.websecure.loadbalancer.server.port=443"
      - "traefik.tcp.services.websecure.loadbalancer.proxyProtocol.version=2"

      - "traefik.tcp.routers.smtp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.smtp.entrypoints=smtp"
      - "traefik.tcp.routers.smtp.service=smtp"
      - "traefik.tcp.services.smtp.loadbalancer.server.port=25"
      - "traefik.tcp.services.smtp.loadbalancer.proxyProtocol.version=2"

      - "traefik.tcp.routers.submissions.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.submissions.entrypoints=submissions"
      - "traefik.tcp.routers.submissions.service=submissions"
      - "traefik.tcp.services.submissions.loadbalancer.server.port=465"
      - "traefik.tcp.services.submissions.loadbalancer.proxyProtocol.version=2"

      - "traefik.tcp.routers.imaps.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.imaps.entrypoints=imaps"
      - "traefik.tcp.routers.imaps.service=imaps"
      - "traefik.tcp.services.imaps.loadbalancer.server.port=993"
      - "traefik.tcp.services.imaps.loadbalancer.proxyProtocol.version=2"

      - "traefik.tcp.routers.pop3s.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.pop3s.entrypoints=pop3s"
      - "traefik.tcp.routers.pop3s.service=pop3s"
      - "traefik.tcp.services.pop3s.loadbalancer.server.port=995"
      - "traefik.tcp.services.pop3s.loadbalancer.proxyProtocol.version=2"

      - "traefik.tcp.routers.sieve.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.sieve.entrypoints=sieve"
      - "traefik.tcp.routers.sieve.service=sieve"
      - "traefik.tcp.services.sieve.loadbalancer.server.port=4190"
      - "traefik.tcp.services.sieve.loadbalancer.proxyProtocol.version=2"
    healthcheck:
      test: ['NONE']

  resolver:
    container_name: mailu-resolver
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}unbound:${MAILU_VERSION:-2024.06}
    env_file: ".env"
    logging:
      driver: journald
      options:
        tag: mailu-resolver
    restart: always
    networks:
      main-net:
        ipv4_address: 192.168.20.254

  admin:
    container_name: mailu-admin
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}admin:${MAILU_VERSION:-2024.06}
    restart: always
    env_file: ".env"
    logging:
      driver: journald
      options:
        tag: mailu-admin
    volumes:
      - "./mailu/data:/data"
      - "./mailu/dkim:/dkim"
    depends_on:
      - redis
      - resolver
    dns:
      - 192.168.20.254
    networks:
      - main-net

  imap:
    container_name: mailu-imap
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}dovecot:${MAILU_VERSION:-2024.06}
    restart: always
    env_file: ".env"
    logging:
      driver: journald
      options:
        tag: mailu-imap
    volumes:
      - "./mailu/mail:/mail"
      - "./mailu/overrides/dovecot:/overrides:ro"
    networks:
      - main-net
    depends_on:
      - front
      - resolver
    dns:
      - 192.168.20.254

  smtp:
    container_name: mailu-smtp
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}postfix:${MAILU_VERSION:-2024.06}
    restart: always
    env_file: ".env"
    logging:
      driver: journald
      options:
        tag: mailu-smtp
    volumes:
      - "./mailu/mailqueue:/queue"
      - "./mailu/overrides/postfix:/overrides:ro"
    networks:
      - main-net
    depends_on:
      - front
      - resolver
    dns:
      - 192.168.20.254

  oletools:
    container_name: mailu-oletools
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}oletools:${MAILU_VERSION:-2024.06}
    hostname: oletools
    logging:
      driver: journald
      options:
        tag: mailu-oletools
    restart: always
    networks:
      - main-net
    depends_on:
      - resolver
    dns:
      - 192.168.20.254


  antispam:
    container_name: mailu-antispam
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}rspamd:${MAILU_VERSION:-2024.06}
    hostname: antispam
    restart: always
    env_file: ".env"
    logging:
      driver: journald
      options:
        tag: mailu-antispam
    networks:
      - main-net
    volumes:
      - "/mailu/filter:/var/lib/rspamd"
      - "/mailu/overrides/rspamd:/overrides:ro"
    depends_on:
      - front
      - redis
      - oletools
      - resolver
    dns:
      - 192.168.20.254

  webmail:
    container_name: mailu-webmail
    image: ${DOCKER_ORG:-ghcr.io/mailu}/${DOCKER_PREFIX:-}webmail:${MAILU_VERSION:-2024.06}
    restart: always
    env_file: ".env"
    logging:
      driver: journald
      options:
        tag: mailu-webmail
    volumes:
      - "./mailu/webmail:/data"
      - "./mailu/overrides/roundcube:/overrides:ro"
    networks:
      - main-net
    depends_on:
      - front

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/data:/prometheus  # Mount local directory for persistent storage
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - main-net
    depends_on:
      - cadvisor
    links:
      - cadvisor:cadvisor
      - node_exporter:node_exporter


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json
      - ./grafana/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml
    ports:
      - "3000:3000"  # Local port for Grafana (if needed)
    privileged: true
    depends_on:
      - prometheus
    networks:
      - main-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`watch.itin.dev`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    privileged: true  # Run in privileged mode to allow full access to host resources
    restart: unless-stopped
    devices:
      - "/dev/kmsg:/dev/kmsg"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - main-net
  
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - main-net

networks:
  main-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.20.0/24
