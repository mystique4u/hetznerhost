name: Deploy Terraform and Ansible

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }}  # Output the public IP from the job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Create terraform.auto.tfvars
        run: |
          cat <<EOF > terraform/terraform.auto.tfvars
          hcloud_token = "${{ secrets.HCLOUD_TOKEN }}"
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          sudo_user = "${{ secrets.SUDO_USER }}"
          firewall_name = "firewall-1"
          EOF

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - id: get_ip
        name: Get Terraform Output (Public IP)
        run: |
          public_ip=$(terraform output -raw public_ip)
          echo "Public IP from Terraform: $public_ip"
          echo "public_ip=$public_ip" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  manage_domains:
    name: Manage Domains with Hetzner API (Robust with Logging)
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl jq

      - name: Check & create A records idempotently
        run: |
          PRIMARY_DOMAIN="${{ secrets.PRIMARY_DOMAIN }}"
          HETZNER_API="https://dns.hetzner.com/api/v1"
          API_TOKEN="${{ secrets.DNS_API_TOKEN }}"
          ZONE_ID="${{ secrets.DNS_ZONE_ID }}"
          SERVER_IP="${{ needs.terraform.outputs.public_ip }}"

          echo "=== Variables ==="
          echo "Primary domain: $PRIMARY_DOMAIN"
          echo "Zone ID: $ZONE_ID"
          echo "Server IP: $SERVER_IP"

          echo "=== Desired subdomains from compose/domains.txt ==="
          cat domains.txt

          echo "=== Fetching existing A records from Hetzner API ==="
          RAW_RESPONSE=$(curl -s -X GET "$HETZNER_API/records?zone_id=$ZONE_ID" \
            -H "Auth-API-Token: $API_TOKEN")

          echo "Raw API response:"
          echo "$RAW_RESPONSE" | jq '.'

          EXISTING=$(echo "$RAW_RESPONSE" | jq -r '.records[] | select(.type=="A") | .name')

          echo "Parsed existing A records:"
          echo "$EXISTING" | sed 's/^/ - /'

          echo "=== Processing desired subdomains ==="
          while read SUB; do
            [ -z "$SUB" ] && continue  # skip empty lines
            FQDN="${SUB}.${PRIMARY_DOMAIN}"

            echo "→ Checking: $FQDN"
            if echo "$EXISTING" | grep -qx "$FQDN"; then
              echo "✅ Exists already: $FQDN (skipping)"
            else
              echo "➕ Not found, creating A record for: $FQDN"
              RESPONSE=$(curl -s -X POST "$HETZNER_API/records" \
                -H "Auth-API-Token: $API_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                      \"zone_id\": \"$ZONE_ID\",
                      \"type\": \"A\",
                      \"name\": \"$SUB\",
                      \"value\": \"$SERVER_IP\",
                      \"ttl\": 86400
                    }")

              echo "API response for $FQDN:"
              echo "$RESPONSE" | jq '.'
            fi
          done < domains.txt
        working-directory: ./compose



  ansible:
    name: Configure VM with Ansible
    runs-on: ubuntu-latest
    needs: [terraform, manage_domains]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible docker
          
      # Install required Ansible collections, including community.docker
      - name: Install Ansible collections
        run: |
          ansible-galaxy collection install -r requirements.yml --force
        working-directory: ./ansible
        
      - name: Add Private SSH Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          ANSIBLE_SSH_PRIVATE_KEY_FILE: ~/.ssh/id_rsa
          
      - name: Update Ansible Inventory with Public IP
        run: |
          sed -i "s/{{ public_ip }}/${{ needs.terraform.outputs.public_ip }}/g" inventory.yml
        working-directory: ./ansible
        
      - name: Update Ansible Inventory with sudo user
        run: |
          sed -i "s/{{ sudo_user }}/${{ secrets.SUDO_USER }}/g" inventory.yml
        working-directory: ./ansible
        
      - name: Check Ansible Inventory
        run: cat inventory.yml
        working-directory: ./ansible
        
      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.yml playbook.yml \
              -e "storage_box_name=${STORAGE_BOX_NAME}" \
              -e "storage_box_user=${STORAGE_BOX_USER}" \
              -e "storage_box_host=${STORAGE_BOX_HOST}" \
              -e "storage_box_password=${STORAGE_BOX_PASSWORD}" \
              -e "storage_box_target_dir=${STORAGE_BOX_TARGET_DIR}" \
              -e "backup_path=/home/runner/tmp_backups" \
              -e "dev_home_path=/home/runner/dev" \
              -e "sudo_user=${SUDO_USER}"
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          PRIMARY_DOMAIN: ${{ secrets.PRIMARY_DOMAIN || 'mrdevops.pro' }}
          COMPOSE_ENV: ${{ secrets.COMPOSE_ENV || '' }}
          STORAGE_BOX_NAME: ${{ secrets.STORAGE_BOX_NAME || 'your-storagebox' }}
          STORAGE_BOX_USER: ${{ secrets.STORAGE_BOX_USER }}
          STORAGE_BOX_HOST: ${{ secrets.STORAGE_BOX_HOST }}
          STORAGE_BOX_PASSWORD: ${{ secrets.STORAGE_BOX_PASSWORD }}
          STORAGE_BOX_TARGET_DIR: ${{ secrets.STORAGE_BOX_TARGET_DIR || 'backups/hosts/hetznerhost' }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SUDO_USER: ${{ secrets.SUDO_USER }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          CRM_ADMIN_PWD: ${{ secrets.CRM_ADMIN_PWD }}
        working-directory: ./ansible

