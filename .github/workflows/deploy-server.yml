name: Deploy Terraform and Ansible

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }}  # Output the public IP from the job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Create terraform.auto.tfvars
        run: |
          cat <<EOF > terraform/terraform.auto.tfvars
          hcloud_token = "${{ secrets.HCLOUD_TOKEN }}"
          ssh_key_name = "${{ secrets.SSH_KEY_NAME }}"
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          sudo_user = "${{ secrets.SUDO_USER }}"
          firewall_name = "firewall-1"
          EOF

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - id: get_ip
        name: Get Terraform Output (Public IP)
        run: |
          public_ip=$(terraform output -raw public_ip)
          echo "Public IP from Terraform: $public_ip"
          echo "public_ip=$public_ip" >> $GITHUB_OUTPUT
        working-directory: ./terraform

  manage_domains:
    name: Manage Domains with Hetzner API
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Install dependencies
        run: sudo apt-get install -y curl jq
      # it is working only for subdomains. IT WILL NOT WORK FOR SUB SUB*N domains
      - name: Extract domain names from Traefik labels in docker-compose.yml
        run: |
          echo "Raw extraction:"
          # Extract domains directly from the docker-compose.yml using the optimized regex
          grep -oP 'Host\(`\K[^\`]+(?=`\))' docker-compose.yml
      
          echo "Domains after processing:"
          # Extract and trim everything after the first dot
          DOMAINS=$(grep -oP 'Host\(`\K[^\`]+(?=`\))' docker-compose.yml | cut -d '.' -f 1)
          echo "$DOMAINS"
      
          # Write domains to a file for further processing
          echo "$DOMAINS" > ./domains.txt
      
          # Debug to check the contents of domains.txt
          echo "Contents of domains.txt:"
          cat ./domains.txt
        working-directory: ./compose  # Set working directory to compose/
  
      - name: Check and create domains using Hetzner API
        run: |
          echo "Starting domain management process..."
          while read DOMAIN; do
            echo "Processing domain: $DOMAIN"
  
            # API endpoint and token for Hetzner DNS
            HETZNER_API="https://dns.hetzner.com/api/v1"
            API_TOKEN="${{ secrets.DNS_API_TOKEN }}"
            SERVER_IP="${{ needs.terraform.outputs.public_ip }}"
            ZONE_ID="${{ secrets.DNS_ZONE }}"
  
            echo "API Token: $API_TOKEN"
            echo "Zone ID: $ZONE_ID"
            echo "Server IP: $SERVER_IP"
  
            # Check if the A record already exists for the domain
            EXISTING_RECORD=$(curl -s -X GET "$HETZNER_API/records?zone_id=$ZONE_ID" -H "Auth-API-Token: $API_TOKEN" | jq -r ".records[] | select(.name == \"$DOMAIN\" and .type == \"A\")")
  
            if [ -z "$EXISTING_RECORD" ]; then
              echo "Domain $DOMAIN does not have an A record. Creating it..."
              
              # Create the new A record for the domain
              CREATE_RECORD_RESPONSE=$(curl -s -X POST "$HETZNER_API/records" \
                -H "Content-Type: application/json" \
                -H "Auth-API-Token: $API_TOKEN" \
                -d "{
                  \"value\": \"$SERVER_IP\",
                  \"ttl\": 86400,
                  \"type\": \"A\",
                  \"name\": \"$DOMAIN\",
                  \"zone_id\": \"$ZONE_ID\"
                }")
  
              echo "A record for domain $DOMAIN created successfully"
            else
              echo "A record for domain $DOMAIN already exists. Skipping creation."
            fi
          done < ./domains.txt
        working-directory: ./compose

  ansible:
    name: Configure VM with Ansible
    runs-on: ubuntu-latest
    needs: [terraform, manage_domains]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y ansible python3-pip
          pip3 install ansible
          pip3 install docker

      # Install required Ansible collections, including community.docker
      - name: Install Ansible collections
        run: |
          ansible-galaxy collection install -r requirements.yml --force
        working-directory: ./ansible

      - name: Add Private SSH Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          ANSIBLE_SSH_PRIVATE_KEY_FILE: ~/.ssh/id_rsa
        
      - name: Update Ansible Inventory with Public IP
        run: |
          sed -i "s/{{ public_ip }}/${{ needs.terraform.outputs.public_ip }}/g" inventory.yml
        working-directory: ./ansible

      - name: Update Ansible Inventory with sudo user
        run: |
          sed -i "s/{{ sudo_user }}/${{ secrets.SUDO_USER }}/g" inventory.yml
        working-directory: ./ansible

      - name: Check Ansible Inventory
        run: cat inventory.yml
        working-directory: ./ansible

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.yml playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          COMPOSE_ENV: ${{ secrets.COMPOSE_ENV }}
          STORAGE_BOX_USER: ${{ secrets.STORAGE_BOX_USER }}
          STORAGE_BOX_HOST: ${{ secrets.STORAGE_BOX_HOST }}
          STORAGE_BOX_SSH_KEY: ${{ secrets.STORAGE_BOX_SSH_KEY }}
          SUDO_USER: ${{ secrets.SUDO_USER }}
        working-directory: ./ansible
