name: Deploy Terraform and Ansible

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }}  # Output the public IP from the job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Create terraform.auto.tfvars
        run: |
          cat <<EOF > terraform/terraform.auto.tfvars
          hcloud_token = "${{ secrets.HCLOUD_TOKEN }}"
          ssh_key_name = "${{ secrets.SSH_KEY_NAME }}"
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          sudo_user = "${{ secrets.SUDO_USER }}"
          firewall_name = "firewall-1"
          EOF

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - id: get_ip  # Capture public IP in this step
        name: Get Terraform Output (Public IP)
        run: |
          public_ip=$(terraform output -raw public_ip)
          echo "Public IP from Terraform: $public_ip"
          echo "public_ip=$public_ip" >> $GITHUB_OUTPUT
        working-directory: ./terraform
  
  manage_domains:
    name: Manage Domains with Hetzner API
    runs-on: ubuntu-latest
    needs: terraform  # Wait for the Terraform job to complete

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install curl and jq
        run: sudo apt-get install -y curl jq

      - name: Create a list of domains from Nginx configs
        run: |
          # Find all domain config files (domain.name.conf) in the domains folder
          DOMAIN_FILES=$(find ./compose/nginx/config/domains -type f -name "*.conf")
          echo "Found domain config files: $DOMAIN_FILES"
          # Extract domain names from the config files (assuming the domain is in the filename)
          DOMAINS=$(echo "$DOMAIN_FILES" | sed -E 's/compose\/nginx\/config\/domains\/(.*)\.conf/\1/')
          echo "Domains to check and create: $DOMAINS"
          echo "$DOMAINS" > domains.txt
        working-directory: ./  # Set working directory to root (or where the domains folder exists)

      - name: Check and create domains using Hetzner API
        run: |
          while read DOMAIN; do
            echo "Processing domain: $DOMAIN"

            # API endpoint and token for Hetzner DNS
            HETZNER_API="https://dns.hetzner.com/api/v1"
            API_TOKEN="${{ secrets.DNS_API_TOKEN }}"
            SERVER_IP="${{ needs.terraform.outputs.public_ip }}"
            ZONE_ID="${{ secrets.DNS_ZONE }}"
            

            # Check if the A record already exists for the domain
            EXISTING_RECORD=$(curl -s -X GET "$HETZNER_API/records?zone_id=$ZONE_ID" -H "Auth-API-Token: $API_TOKEN" | jq -r ".records[] | select(.name == \"$DOMAIN\" and .type == \"A\")")

            if [ -z "$EXISTING_RECORD" ]; then
              echo "Domain $DOMAIN does not have an A record. Creating it..."
              
              # Create the new A record for the domain
              CREATE_RECORD_RESPONSE=$(curl -s -X POST "$HETZNER_API/records" \
                -H "Content-Type: application/json" \
                -H "Auth-API-Token: $API_TOKEN" \
                -d $'{
                  "value": "'$SERVER_IP'",  # Replace with the correct IP address
                  "ttl": 86400,
                  "type": "A",
                  "name": "'$DOMAIN'",
                  "zone_id": "'$ZONE_ID'"
                }')

              echo "A record for domain $DOMAIN created successfully"
            else
              echo "A record for domain $DOMAIN already exists. Skipping creation."
            fi
          done < domains.txt
        working-directory: ./  # Set working directory to root (or where the domains folder exists)


  ansible:
    name: Configure VM with Ansible
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Add Private SSH Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          ANSIBLE_SSH_PRIVATE_KEY_FILE: ~/.ssh/id_rsa
        
      - name: Update Ansible Inventory with Public IP
        run: |
          sed -i "s/{{ public_ip }}/${{ needs.terraform.outputs.public_ip }}/g" inventory.yml
        working-directory: ./ansible

      - name: Update Ansible Inventory with sudo user
        run: |
          sed -i "s/{{ sudo_user }}/${{ secrets.SUDO_USER }}/g" inventory.yml
        working-directory: ./ansible

      - name: Check Ansible Inventory
        run: cat inventory.yml
        working-directory: ./ansible

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.yml playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        working-directory: ./ansible
