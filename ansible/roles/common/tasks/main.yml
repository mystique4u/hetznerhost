---
# Update all packages
- name: Update all packages
  apt:
    update_cache: true
    upgrade: dist

# Install required packages
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - curl
    - wget
    - build-essential
    - ca-certificates
    - gnupg
    - lsb-release
    - software-properties-common
    - mc

# Enable IP forwarding for WireGuard VPN
- name: Enable IP forwarding for WireGuard VPN
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: true

- name: Ensure IP forwarding is persistent
  lineinfile:
    path: /etc/sysctl.conf
    regexp: "^net.ipv4.ip_forward"
    line: "net.ipv4.ip_forward=1"
    state: present

# Configure UFW firewall rules
- name: Allow necessary ports through the firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: "{{ 'udp' if item == '51820' else 'tcp' }}"
  loop:
    - 80    # HTTP
    - 443   # HTTPS
    - 8080  # phpMyAdmin
    - 51820 # WireGuard VPN
    - 110   # POP3
    - 995   # POP3 Secure
    - 143   # IMAP
    - 993   # IMAP Secure
    - 25    # SMTP
    - 465   # SMTP Secure
    - 587   # Submission

# Create folder structure for Docker Compose
- name: Create folder structure for Docker Compose
  file:
    path: "/home/{{ ansible_user }}/dev/{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - compose
    - compose/nginx/config
    - compose/nginx/logs
    - compose/nginx/certs
    - compose/nginx/webroot
    - compose/vaultwarden/config
    - compose/wireguard/config
    - compose/mailserver/data/backup-mysql
    - compose/mailserver/data/clamav
    - compose/mailserver/data/custom
    - compose/mailserver/data/imapsieve_copy
    - compose/mailserver/data/mailboxes
    - compose/mailserver/data/mlmmj
    - compose/mailserver/data/mlmmj-archive
    - compose/mailserver/data/mysql
    - compose/mailserver/data/postfix_queue
    - compose/mailserver/data/sa_rules
    - compose/mailserver/data/ssl
    - compose/mysql/config
    - compose/mysql/data

# Copy the entire compose directory recursively from the repository to the server
- name: Copy entire compose directory to the server
  synchronize:
    src: ../../../../compose/   # This is the source directory in the repo
    dest: "/home/{{ ansible_user }}/dev/compose/"
    mode: push
    recursive: true


# TODO IF NOT FIRST RUN AND SOME file are exists - remove some lines

# Create the .env file for secrets
- name: Create secrets file
  copy:
    content: |
      {{ lookup('env', 'COMPOSE_ENV') }}
    dest: "/home/{{ ansible_user }}/dev/compose/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

#Run docker compose

# - name: Create secrets file
#   copy:
#     content: |
#       HCLOUD_TOKEN={{ lookup('env', 'HCLOUD_TOKEN') }}
#       SSH_KEY_NAME={{ lookup('env', 'SSH_KEY_NAME') }}
#       SSH_PUBLIC_KEY={{ lookup('env', 'SSH_PUBLIC_KEY') }}
#       SUDO_USER={{ lookup('env', 'SUDO_USER') }}
#       SSH_PRIVATE_KEY={{ lookup('env', 'SSH_PRIVATE_KEY') }}
#       TFC_TOKEN={{ lookup('env', 'TFC_TOKEN') }}
#     dest: "/home/{{ ansible_user }}/dev/secrets/.env"
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     mode: '0755'
