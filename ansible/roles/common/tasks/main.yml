---
- name: Ensure system is up to date
  hosts: all
  become: true

  tasks:
    - name: Update all packages
      apt:
        update_cache: true
        upgrade: dist

    - name: Install development tools (curl, wget, etc.)
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - curl
        - wget
        - build-essential
        - ca-certificates
        - gnupg
        - lsb-release
        - software-properties-common
        - mc

    - name: Enable IP forwarding for WireGuard VPN
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Ensure IP forwarding is persistent
      lineinfile:
        path: /etc/sysctl.conf
        regexp: "^net.ipv4.ip_forward"
        line: "net.ipv4.ip_forward=1"
        state: present

    - name: Allow necessary ports through the firewall
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: "{{ 'udp' if item == '51820' else 'tcp' }}"
      loop:
        - 80    # HTTP
        - 443   # HTTPS
        - 8080  # phpMyAdmin
        - 51820 # WireGuard VPN

    - name: Create user directories for development
      file:
        path: "/home/{{ ansible_user }}/dev/{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - compose
        - backups
        - scripts
        - db

    - name: Create folder structure for Docker Compose
      file:
        path: "/home/{{ ansible_user }}/dev/compose/{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - nginx
        - nginx/config
        - nginx/logs
        - nginx/certs
        - vaultwarden
        - vaultwarden/config
        - wireguard
        - wireguard/config
        - mailserver
        - mailserver/config
        - mailserver/data
        - mailserver/ssl
        - mysql
        - mysql/config
        - mysql/data

    - name: Ensure ownership of all created directories
      command: chown -R "{{ ansible_user }}:{{ ansible_user }}" "/home/{{ ansible_user }}/dev"
      args:
        creates: "/home/{{ ansible_user }}/dev"


# - name: Create secrets file
#   copy:
#     content: |
#       HCLOUD_TOKEN={{ lookup('env', 'HCLOUD_TOKEN') }}
#       SSH_KEY_NAME={{ lookup('env', 'SSH_KEY_NAME') }}
#       SSH_PUBLIC_KEY={{ lookup('env', 'SSH_PUBLIC_KEY') }}
#       SUDO_USER={{ lookup('env', 'SUDO_USER') }}
#       SSH_PRIVATE_KEY={{ lookup('env', 'SSH_PRIVATE_KEY') }}
#       TFC_TOKEN={{ lookup('env', 'TFC_TOKEN') }}
#     dest: "/home/{{ ansible_user }}/dev/secrets/.env"
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     mode: '0755'
