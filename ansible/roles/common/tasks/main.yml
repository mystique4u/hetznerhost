---
# Update all packages
- name: Update all packages
  apt:
    update_cache: true
    upgrade: dist

# Install required packages
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - curl
    - wget
    - build-essential
    - ca-certificates
    - gnupg
    - lsb-release
    - software-properties-common
    - mc
    - sshfs
    - rsync

# Enable IP forwarding for WireGuard VPN
- name: Enable IP forwarding for WireGuard VPN
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: true

- name: Ensure IP forwarding is persistent
  lineinfile:
    path: /etc/sysctl.conf
    regexp: "^net.ipv4.ip_forward"
    line: "net.ipv4.ip_forward=1"
    state: present

# Configure UFW firewall rules
- name: Allow necessary ports through the firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: "{{ 'udp' if item == '51820' else 'tcp' }}"
  loop:
    - 80    # HTTP
    - 443   # HTTPS
    - 8080  # phpMyAdmin
    - 51820 # WireGuard VPN
    - 110   # POP3
    - 995   # POP3 Secure
    - 143   # IMAP
    - 993   # IMAP Secure
    - 25    # SMTP
    - 465   # SMTP Secure
    - 587   # Submission

### SOME GIT FOLDERS SYNCHRONISATION

# Copy the entire compose directory recursively from the repository to the server
- name: Copy entire compose directory to the server
  synchronize:
    src: ../../../../compose/   # This is the source directory in the repo
    dest: "/home/{{ ansible_user }}/dev/compose/"
    mode: push
    recursive: true
    rsync_opts:
      - "--chmod=F644"

- name: Set write permission for all users on specific folders and their contents
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0777'
    recurse: true
  loop:
    - "/home/{{ ansible_user }}/dev/compose/odoo"
    - "/home/{{ ansible_user }}/dev/compose/db"

- name: Ensure acme.json has 600 permissions
  file:
    path: "/home/{{ ansible_user }}/dev/compose/traefik/acme.json"
    mode: '0600'

# Copy the entire scripts directory recursively from the repository to the server
- name: Copy entire scripts directory to the server
  synchronize:
    src: ../../../../scripts/
    dest: "/home/{{ ansible_user }}/dev/scripts/"
    mode: push
    recursive: true
    rsync_opts:
      - "--chmod=F777"

- name: Ensure SSH private key exists (via GitHub secret)
  copy:
    content: "{{ lookup('env', 'STORAGE_BOX_SSH_KEY') }}"
    dest: "{{ ssh_private_key }}"
    mode: '0600'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

### MOUNT REMOTE DISK
- name: Create ~/mount directory if it doesn't exist
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/storagebox"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Check if the SSHFS mount is already present
  ansible.builtin.command: mountpoint "/home/{{ ansible_user }}/storagebox"
  register: sshfs_mount_check
  changed_when: false
  failed_when: sshfs_mount_check.rc != 0 and sshfs_mount_check.stderr != ""

- name: Mount SSHFS directory if not mounted
  ansible.builtin.shell: |
    sshfs -o IdentityFile={{ ssh_private_key }} -p 23 u328253@u328253.your-storagebox.de:/home "/home/{{ ansible_user }}/storagebox"
  when: sshfs_mount_check.rc != 0
  become: false  # Ensure this command is run as the ansible_user, not root


### BACKUPS

- name: Create backup directory on Hetzner's storage box
  ansible.builtin.shell: >
    ssh -i {{ ssh_private_key }} -p 23
    {{ storage_box_user }}@{{ storage_box_user ~ '.' ~ storage_box_host }}
    "mkdir -p {{ storage_box_target_dir }}"
  register: mkdir_output
  changed_when: "'created' in mkdir_output.stdout or mkdir_output.rc == 0"
  failed_when: mkdir_output.rc != 0

# Check if the local backup directory exists
- name: Check if the local backup directory exists
  stat:
    path: "{{ local_backup_dir }}"
  register: backup_dir_stat

- name: Sync local directory to storage box
  command: >
    rsync --progress --delete -e "ssh -i {{ ssh_private_key }} -p 23"
    -r {{ local_backup_dir }} {{ storage_box_user }}@{{ storage_box_user ~ '.' ~ storage_box_host }}:{{ storage_box_target_dir }}
  register: rsync_output
  when: backup_dir_stat.stat.exists


# Log a message if the local backup directory is missing
- name: Log a message if the local backup directory is missing
  debug:
    msg: "The local backup directory '{{ local_backup_dir }}' does not exist. Skipping backup sync."
  when: not backup_dir_stat.stat.exists

# - name: Clean up SSH key
#   file:
#     path: "{{ ssh_private_key }}"
#     state: absent

# Generate the backup script using the template module
- name: Generate backup script from template
  template:
    src: backup.sh.j2
    dest: "/home/{{ ansible_user }}/dev/scripts/cron/backup.sh"  # Where the generated script will be stored
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

# Cron setup to run every 10 minutes
- name: Add cron job to run backup every 10 minutes
  ansible.builtin.cron:
    name: "Run backup script every 10 minutes"
    minute: "*/10"
    hour: "*"
    job: "/home/{{ ansible_user }}/dev/scripts/cron/backup.sh"
    state: present
