---
# Update all packages
- name: Update all packages
  apt:
    update_cache: true
    upgrade: dist

# Install required packages
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - curl
    - wget
    - build-essential
    - ca-certificates
    - gnupg
    - lsb-release
    - software-properties-common
    - mc

# Enable IP forwarding for WireGuard VPN
- name: Enable IP forwarding for WireGuard VPN
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: true

- name: Ensure IP forwarding is persistent
  lineinfile:
    path: /etc/sysctl.conf
    regexp: "^net.ipv4.ip_forward"
    line: "net.ipv4.ip_forward=1"
    state: present

# Configure UFW firewall rules
- name: Allow necessary ports through the firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: "{{ 'udp' if item == '51820' else 'tcp' }}"
  loop:
    - 80    # HTTP
    - 443   # HTTPS
    - 8080  # phpMyAdmin
    - 51820 # WireGuard VPN
    - 110   # POP3
    - 995   # POP3 Secure
    - 143   # IMAP
    - 993   # IMAP Secure
    - 25    # SMTP
    - 465   # SMTP Secure
    - 587   # Submission

# Copy the entire scripts directory recursively from the repository to the server
- name: Copy entire scripts directory to the server
  synchronize:
    src: ../../../../scripts/
    dest: "/home/{{ ansible_user }}/dev/scripts/"
    mode: push
    recursive: true
    rsync_opts:
      - "--chmod=F777"

# backups
- name: Ensure SSH private key exists (via GitHub secret)
  copy:
    content: "{{ lookup('env', 'STORAGE_BOX_SSH_KEY') }}"
    dest: "{{ ssh_private_key }}"
    mode: '0600'

- name: Create backup directory on hetzners storage box
  shell: >
    ssh -i {{ ssh_private_key }} -p 23
    {{ storage_box_user }}@{{ storage_box_user }}.{{ storage_box_host }}
    "mkdir -p {{ storage_box_target_dir }}"
  ignore_errors: yes

- name: Sync local directory to storage box
  command: >
    rsync --progress --delete -e "ssh -i {{ ssh_private_key }} -p 23"
    -r {{ local_backup_dir }} {{ storage_box_user }}@{{ storage_box_host }}:{{ storage_box_target_dir }}
  register: rsync_output

- name: Output rsync results
  debug:
    var: rsync_output.stdout

- name: Clean up SSH key
  file:
    path: "{{ ssh_private_key }}"
    state: absent

# Generate the backup script using the template module
- name: Generate backup script from template
  template:
    src: "/home/{{ ansible_user }}/dev/scripts/cron/backup.sh.j2"  # Path to the Jinja2 template for the bash script
    dest: "/home/{{ ansible_user }}/dev/scripts/cron/backup.sh"  # Where the generated script will be stored
    mode: '0755'

# Cron setup to run every 10 minutes
- name: Add cron job to run backup every 10 minutes
  ansible.builtin.cron:
    name: "Run backup script every 10 minutes"
    minute: "*/10"
    hour: "*"
    job: "/home/{{ ansible_user }}/dev/scripts/cron/backup.sh"
    state: present


# - name: Create secrets file
#   copy:
#     content: |
#       HCLOUD_TOKEN={{ lookup('env', 'HCLOUD_TOKEN') }}
#       SSH_KEY_NAME={{ lookup('env', 'SSH_KEY_NAME') }}
#       SSH_PUBLIC_KEY={{ lookup('env', 'SSH_PUBLIC_KEY') }}
#       SUDO_USER={{ lookup('env', 'SUDO_USER') }}
#       SSH_PRIVATE_KEY={{ lookup('env', 'SSH_PRIVATE_KEY') }}
#       TFC_TOKEN={{ lookup('env', 'TFC_TOKEN') }}
#     dest: "/home/{{ ansible_user }}/dev/secrets/.env"
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     mode: '0755'
