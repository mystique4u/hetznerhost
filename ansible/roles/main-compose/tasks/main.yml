---
# Configure UFW firewall rules
- name: Allow necessary ports through the firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: "{{ 'udp' if item == '51820' else 'tcp' }}"
  loop:
    - 80    # HTTP
    - 443   # HTTPS
    - 8080  # phpMyAdmin
    - 51820 # WireGuard VPN
    - 110   # POP3
    - 995   # POP3 Secure
    - 143   # IMAP
    - 993   # IMAP Secure
    - 25    # SMTP
    - 465   # SMTP Secure
    - 587   # Submission

# Create folder structure for Docker Compose
- name: Create folder structure for Docker Compose
  file:
    path: "/home/{{ ansible_user }}/dev/{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - compose
    - compose/nginx/config
    - compose/nginx/logs
    - compose/vaultwarden/config
    - compose/wireguard/config
    - compose/mailserver/data/backup-mysql
    - compose/mailserver/data/clamav
    - compose/mailserver/data/custom
    - compose/mailserver/data/imapsieve_copy
    - compose/mailserver/data/mailboxes
    - compose/mailserver/data/mlmmj
    - compose/mailserver/data/mlmmj-archive
    - compose/mailserver/data/mysql
    - compose/mailserver/data/postfix_queue
    - compose/mailserver/data/sa_rules
    - compose/mailserver/data/ssl
    - compose/mysql/config
    - compose/mysql/data

# Copy the entire compose directory recursively from the repository to the server
- name: Copy entire compose directory to the server
  synchronize:
    src: ../../../../compose/   # This is the source directory in the repo
    dest: "/home/{{ ansible_user }}/dev/compose/"
    mode: push
    recursive: true

# - name: Set executable permissions for all .sh scripts in the scripts folder
#   ansible.builtin.find:
#     paths: "/home/{{ ansible_user }}/dev/compose/scripts/"
#     patterns: "*.sh"
#   register: sh_files

# - name: Change file permissions to readable and executable for all users
#   ansible.builtin.file:
#     path: "{{ item.path }}"
#     mode: '755'  # Set rwxr-xr-x permissions (read, write, execute for owner, read, execute for group and others)
#   with_items: "{{ sh_files.files }}"
#   when: sh_files.matched > 0

# TODO IF NOT FIRST RUN AND SOME file are exists - remove some lines

# Create the .env file for secrets
- name: Create secrets file
  copy:
    content: |
      {{ lookup('env', 'COMPOSE_ENV') }}
    dest: "/home/{{ ansible_user }}/dev/compose/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Stop Docker Compose services
  command: docker-compose down
  args:
    chdir: "/home/{{ ansible_user }}/dev/compose/"

- name: Remove all unused Docker images
  command: docker image prune -af

- name: Bring up Docker Compose services
  command: docker-compose up -d
  args:
    chdir: "/home/{{ ansible_user }}/dev/compose/"