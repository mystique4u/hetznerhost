---
# Hetzner Storage Box backup system using SSH key-based SFTP

- name: Create backup directory if it doesn't exist
  ansible.builtin.file:
    path: "{{ backup_path }}"
    state: directory
    mode: '0700'
    owner: "{{ sudo_user }}"
    group: "{{ sudo_user }}"
  tags: backup

- name: Install required packages for backup and SSH
  package:
    name:
      - curl
      - jq
      - openssh-client
      - rsync
    state: present
  tags: backup

- name: Debug storage box configuration
  debug:
    msg:
      - "Storage box name: {{ storage_box_name }}"
      - "Backup path: {{ backup_path }}"
      - "Target directory: {{ storage_box_target_dir }}"
      - "Storage box host: {{ storage_box_host }}"
      - "Storage box user: {{ storage_box_user }}"
      - "SSH key path: {{ ssh_storagebox_pkey_path }}"
  tags: backup

- name: Create backup archive
  archive:
    path: "{{ dev_home_path }}/"
    dest: "{{ backup_path }}/backup_$(date +'%Y%m%d%H%M%S').tar.gz"
    format: gz
    exclude_path:
      - "{{ backup_path }}"   # exclude tmp_backups itself
  register: backup_archive
  tags: backup

- name: Debug backup archive creation
  debug:
    msg:
      - "Backup archive created: {{ backup_archive.archived | default('NO_FILES') }}"
      - "Archive path: {{ backup_archive.archive | default('NOT_CREATED') }}"
  tags: backup

- name: Write SSH private key for storage box
  copy:
    content: "{{ lookup('env', 'SSH_PRIVATE_KEY') }}"
    dest: "{{ ssh_storagebox_pkey_path }}"
    mode: '0600'
  tags: backup

- name: Upload backup to Hetzner Storage Box via SFTP (key-based)
  ansible.posix.synchronize:
    src: "{{ backup_archive.archive }}"
    dest: "{{ storage_box_target_dir }}/"
    mode: push
    rsync_path: "mkdir -p {{ storage_box_target_dir }} && rsync"
    ssh_args: "-i {{ ssh_storagebox_pkey_path }} -o StrictHostKeyChecking=no"
    ssh_user: "{{ storage_box_user }}"
    ssh_host: "{{ storage_box_host }}"
  when: backup_archive.archive is defined
  tags: backup

- name: Clean up old backups (keep last 7)
  find:
    paths: "{{ backup_path }}"
    patterns: "backup_*.tar.gz"
    age: "7d"
  register: old_backups
  tags: backup

- name: Remove old backup files
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ old_backups.files }}"
  when: old_backups.files is defined
  tags: backup

- name: Show backup completion status
  debug:
    msg: |
      Backup completed successfully!
      Archive: {{ backup_archive.archive | default('N/A') }}
      Uploaded to: {{ storage_box_user }}@{{ storage_box_host }}:{{ storage_box_target_dir }}
  tags: backup
