---
### BACKUPS

# Check if dev directory exists
- name: Check if dev directory exists
  ansible.builtin.stat:
    path: "{{ dev_home_path }}"
  register: dev_dir_stat

# Create a directory for dev snapshot (only if dev directory exists)
- name: Create dev snapshot directory
  ansible.builtin.file:
    path: "{{ backup_path }}/dev_snapshot"
    state: directory
    owner: "{{ sudo_user }}"
    group: "{{ sudo_user }}"
    mode: '0755'
  when: dev_dir_stat.stat.exists

# Copy the {{ dev_home_path }} folder to the snapshot directory
- name: Copy {{ dev_home_path }} folder to snapshot directory
  ansible.builtin.shell: |
    rsync -a --delete {{ dev_home_path }}/ {{ backup_path }}/dev_snapshot/
  args:
    executable: /bin/bash
  when: dev_dir_stat.stat.exists

# Compress the snapshot into a tar.gz file
- name: Create tar.gz backup of dev snapshot
  ansible.builtin.shell: |
    tar -czf "{{ backup_path }}/backup_$(date +'%Y%m%d%H%M%S').tar.gz" -C "{{ backup_path }}/dev_snapshot/" .
  args:
    executable: /bin/bash
  when: dev_dir_stat.stat.exists

# Rotate backups to keep only the latest 7 tar.gz files
- name: Rotate local backups (keep latest 7 backups)
  ansible.builtin.shell: |
    ls -t {{ backup_path }}/backup_*.tar.gz | tail -n +8 | xargs -r rm
  args:
    executable: /bin/bash

# Complete backup sync solution with proper error handling

# Option 2: Secure solution with proper host key management
- name: Create .ssh directory
  file:
    path: "/home/{{ sudo_user }}/.ssh"
    state: directory
    mode: '0700'
    owner: "{{ sudo_user }}"
  tags: backup

- name: Get storage box host key
  command: ssh-keyscan -p 23 {{ storage_box_fqdn }}
  register: storage_box_host_key
  changed_when: false
  tags: backup

- name: Add storage box to known hosts
  known_hosts:
    name: "[{{ storage_box_fqdn }}]:23"
    key: "{{ storage_box_host_key.stdout }}"
    state: present
    path: "/home/{{ sudo_user }}/.ssh/known_hosts"
  become_user: "{{ sudo_user }}"
  tags: backup

- name: Test SSH connection to storage box
  command: >
    ssh -i {{ ssh_storagebox_pkey_path }} -p 23 -o ConnectTimeout=10
    {{ storage_box_user }}@{{ storage_box_fqdn }} "echo 'Connection test successful'"
  register: ssh_test
  changed_when: false
  tags: backup

- name: Sync backups to storage box (secure)
  command: >
    rsync --progress --delete -r -e "ssh -i {{ ssh_storagebox_pkey_path }} -p 23"
    {{ backup_path }}/ {{ storage_box_user }}@{{ storage_box_fqdn }}:{{ storage_box_target_dir }}
  register: rsync_output
  failed_when: rsync_output.rc != 0
  tags: backup

# Error handling and logging
- name: Show rsync output on failure
  debug:
    msg: |
      Rsync failed with return code: {{ rsync_output.rc }}
      Stderr: {{ rsync_output.stderr }}
      Stdout: {{ rsync_output.stdout }}
  when: rsync_output is defined and rsync_output.rc != 0
  tags: backup

- name: Show successful sync statistics
  debug:
    msg: |
      Backup sync completed successfully
      Duration: {{ rsync_output.delta if rsync_output is defined else 'N/A' }}
      Files transferred: Check rsync output above
  when: rsync_output is defined and rsync_output.rc == 0
  tags: backup

# Cleanup temporary files if needed
- name: Clean up temporary backup directory
  file:
    path: "{{ backup_path }}"
    state: absent
  when: cleanup_temp_backups | default(false)
  tags: backup

# Optional: Display backup status
- name: Display backup result
  debug:
    msg: "{{ 'Dev directory backed up successfully' if dev_dir_stat.stat.exists else 'Dev directory does not exist - skipped backup creation' }}"